/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crypto;

import controller.BitcoinCashController;
import controller.BitcoinController;
import controller.EtheriumController;
import controller.LitecoinController;
import controller.RippleController;
import controller.StellarController;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.MarketCapModel;

/**
 *
 * @author Lenovo
 */
public class Table extends javax.swing.JPanel {
    
    private DefaultTableModel model;

    /**
     * Creates new form Table
     */
    public Table() {
        initComponents();
        
        //setLocationRelativeTo(null);
        model = new DefaultTableModel();
        jTable1.setModel(model);
        model.addColumn("Date");
        model.addColumn("Open");
        model.addColumn("High");
        model.addColumn("Low");
        model.addColumn("Close");
        model.addColumn("Volume");
        model.addColumn("Market Cap");
        model.addColumn("Fluktuasi");
        String key = String.valueOf(jComboBox1.getSelectedItem());
        loadDataBitcoin("All");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        Ok = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();

        jLabel3.setText("Mata Uang");

        jLabel4.setText("Tabel Historical Data Bitcoin");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bitcoin", "Bitcoin Cash", "Etherium", "Litecoin", "Ripple", "Stellar" }));
        jComboBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox2MouseClicked(evt);
            }
        });
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Filter Bulan");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        Ok.setText("OK");
        Ok.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OkMouseClicked(evt);
            }
        });
        Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel5.setText("Mata Uang");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Ok))
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(793, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1005, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ok))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(519, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(124, 124, 124)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:

        String ket = jComboBox2.getSelectedItem().toString();

        jLabel4.setText("Tabel Historical Data " + ket);
        model = new DefaultTableModel();
        jTable1.setModel(model);
        model.addColumn("Date");
        model.addColumn("Open");
        model.addColumn("High");
        model.addColumn("Low");
        model.addColumn("Close");
        model.addColumn("Volume");
        model.addColumn("Market Cap");
        model.addColumn("Fluktuasi");

    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkActionPerformed
        // TODO add your handling code here:
        //if (BitcoinBtn)

        //loadDataBitcoin(jComboBox1.getSelectedItem().toString());
        String bulan = jComboBox1.getSelectedItem().toString();
        String value = jComboBox2.getSelectedItem().toString();

        if (value == "Bitcoin")
        loadDataBitcoin(bulan);
        else if (value == "Bitcoin Cash")
        loadDataBitcoinCash(bulan);
        else if (value == "Etherium")
        loadDataEtherium(bulan);
        else if (value == "Litecoin")
        loadDataLitecoin(bulan);
        else if (value == "Ripple")
        loadDataRipple(bulan);
        else if (value == "Stellar")
        loadDataStellar(bulan);

    }//GEN-LAST:event_OkActionPerformed

    private void OkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OkMouseClicked
        String bulan = jComboBox1.getSelectedItem().toString();
        String value = jComboBox2.getSelectedItem().toString();
        
        if (value == "Bitcoin")
            loadDataBitcoin(bulan);
        else if (value == "Bitcoin Cash")
            loadDataBitcoinCash(bulan);
        else if (value == "Etherium")
            loadDataEtherium(bulan);
        else if (value == "Litecoin")
            loadDataLitecoin(bulan);
        else if (value == "Ripple")
            loadDataRipple(bulan);
        else if (value == "Stellar")
            loadDataStellar(bulan);
    }//GEN-LAST:event_OkMouseClicked

    private void jComboBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox2MouseClicked
        String ket = jComboBox2.getSelectedItem().toString();
        
        jLabel4.setText("Tabel Historical Data " + ket);
        model = new DefaultTableModel();
        jTable1.setModel(model);
        model.addColumn("Date");
        model.addColumn("Open");
        model.addColumn("High");
        model.addColumn("Low");
        model.addColumn("Close");
        model.addColumn("Volume");
        model.addColumn("Market Cap");
        model.addColumn("Fluktuasi");
    }//GEN-LAST:event_jComboBox2MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Ok;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void loadDataBitcoin(String key) {
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        BitcoinController bitcoin = new BitcoinController();
        List<MarketCapModel> subList;

        subList = bitcoin.getList();
        if (!subList.isEmpty()) {
            int size;

            size = subList.size();

            for (int i = 0; i < size; i++) {
                String currMonth = subList.get(i).getDate().substring(3, 6);
                
                if (key.equals("All")){
                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen() + " $",
                        subList.get(i).getHigh() + " $",
                        subList.get(i).getLow() + " $",
                        subList.get(i).getClose() + " $",
                        subList.get(i).getVolume() + " $",
                        subList.get(i).getMarketCap() + " $",
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
                else if (currMonth.equals(key)) {

                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen() + " $",
                        subList.get(i).getHigh() + " $",
                        subList.get(i).getLow() + " $",
                        subList.get(i).getClose() + " $",
                        subList.get(i).getVolume() + " $",
                        subList.get(i).getMarketCap() + " $",
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
            }
        }
    }

    private void loadDataBitcoinCash(String key) {
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        BitcoinCashController bitcoinCash = new BitcoinCashController();
        List<MarketCapModel> subList;

        subList = bitcoinCash.getList();
        if (!subList.isEmpty()) {
            int size;

            size = subList.size();

            for (int i = 0; i < size; i++) {
                String currMonth = subList.get(i).getDate().substring(3, 6);
                
                if (key.equals("All")){
                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen() + " $",
                        subList.get(i).getHigh() + " $",
                        subList.get(i).getLow() + " $",
                        subList.get(i).getClose() + " $",
                        subList.get(i).getVolume() + " $",
                        subList.get(i).getMarketCap() + " $",
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
                else if (currMonth.equals(key)) {

                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen() + " $",
                        subList.get(i).getHigh() + " $",
                        subList.get(i).getLow() + " $",
                        subList.get(i).getClose() + " $",
                        subList.get(i).getVolume() + " $",
                        subList.get(i).getMarketCap() + " $",
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
            }
        }
    }

    private void loadDataLitecoin(String key) {
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        LitecoinController liteCoin = new LitecoinController();
        List<MarketCapModel> subList;

        subList = liteCoin.getList();
        if (!subList.isEmpty()) {
            int size;

            size = subList.size();

            for (int i = 0; i < size; i++) {
                String currMonth = subList.get(i).getDate().substring(3, 6);
                
                if (key.equals("All")){
                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen() + " $",
                        subList.get(i).getHigh() + " $",
                        subList.get(i).getLow() + " $",
                        subList.get(i).getClose() + " $",
                        subList.get(i).getVolume() + " $",
                        subList.get(i).getMarketCap() + " $",
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
                else if (currMonth.equals(key)) {

                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen() + " $",
                        subList.get(i).getHigh() + " $",
                        subList.get(i).getLow() + " $",
                        subList.get(i).getClose() + " $",
                        subList.get(i).getVolume() + " $",
                        subList.get(i).getMarketCap() + " $",
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
            }
        }
    }

    private void loadDataRipple(String key) {
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        RippleController ripple = new RippleController();
        List<MarketCapModel> subList;

        subList = ripple.getList();
        if (!subList.isEmpty()) {
            int size;

            size = subList.size();

            for (int i = 0; i < size; i++) {
                String currMonth = subList.get(i).getDate().substring(3, 6);
                
                if (key.equals("All")){
                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen() + " $",
                        subList.get(i).getHigh() + " $",
                        subList.get(i).getLow() + " $",
                        subList.get(i).getClose() + " $",
                        subList.get(i).getVolume() + " $",
                        subList.get(i).getMarketCap() + " $",
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
                else if (currMonth.equals(key)) {

                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen() + " $",
                        subList.get(i).getHigh() + " $",
                        subList.get(i).getLow() + " $",
                        subList.get(i).getClose() + " $",
                        subList.get(i).getVolume() + " $",
                        subList.get(i).getMarketCap() + " $",
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
            }
        }

    }

    private void loadDataEtherium(String key) {
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();

        EtheriumController etherium = new EtheriumController();
        List<MarketCapModel> subList;

        subList = etherium.getList();
        if (!subList.isEmpty()) {
            int size;

            size = subList.size();

            for (int i = 0; i < size; i++) {
                String currMonth = subList.get(i).getDate().substring(3, 6);
                
                if (key.equals("All")){
                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen(),
                        subList.get(i).getHigh(),
                        subList.get(i).getLow(),
                        subList.get(i).getClose(),
                        subList.get(i).getVolume(),
                        subList.get(i).getMarketCap(),
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
                else if (currMonth.equals(key)) {

                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen(),
                        subList.get(i).getHigh(),
                        subList.get(i).getLow(),
                        subList.get(i).getClose(),
                        subList.get(i).getVolume(),
                        subList.get(i).getMarketCap(),
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
            }
        }

    }

    private void loadDataStellar(String key) {
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();

        StellarController stellar = new StellarController();
        List<MarketCapModel> subList;

        subList = stellar.getList();
        if (!subList.isEmpty()) {
            int size;

            size = subList.size();

            for (int i = 0; i < size; i++) {
                String currMonth = subList.get(i).getDate().substring(3, 6);
                
                if (key.equals("All")){
                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen(),
                        subList.get(i).getHigh(),
                        subList.get(i).getLow(),
                        subList.get(i).getClose(),
                        subList.get(i).getVolume(),
                        subList.get(i).getMarketCap(),
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
                else if (currMonth.equals(key)) {

                    double fluktuasi;
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    if (i == 0) {
                        fluktuasi = 0;
                    } else {
                        fluktuasi = (subList.get(i).getClose() - subList.get(i - 1).getClose()) / subList.get(i - 1).getClose() * 100;
                    }
                    Object[] rowData = new Object[]{
                        subList.get(i).getDate(),
                        subList.get(i).getOpen(),
                        subList.get(i).getHigh(),
                        subList.get(i).getLow(),
                        subList.get(i).getClose(),
                        subList.get(i).getVolume(),
                        subList.get(i).getMarketCap(),
                        Double.valueOf(twoDForm.format(fluktuasi)) + "%"
                    };

                    model.addRow(rowData);
                }
            }
        }
    }   
}
